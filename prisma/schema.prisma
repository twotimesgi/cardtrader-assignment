generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys" // Use foreign keys to enforce relations at the database level
}

model Category {
  id         String      @id @default(uuid())
  name       String      @unique 
  products   Product[]
  attributes Attribute[] // List of possible attributes for products in this category

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id                String                  @id @default(uuid())
  model             String
  brand             String
  price             Float

  categoryId        String
  category          Category                @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productAttributes ProductAttributeValue[] 
  productImages     ProductImage[]          // New relation field for images

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId]) 
}

model ProductImage {
  id          String   @id @default(uuid())
  url         String   // URL or path to the image
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

//TODO: Add required attributes
model Attribute {
  id         String   @id @default(uuid())
  name       String
  categoryId String
  required   Boolean  @default(false)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Foreign key relation with cascading delete
  ProductAttributeValue ProductAttributeValue[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@index([categoryId]) // Index on categoryId
  @@unique([name, categoryId]) // Ensures each attribute name is unique within a category
}

model ProductAttributeValue {
  id          String    @id @default(uuid())
  value       String // e.g., "Red", "Large"
  productId   String
  attributeId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade) // Foreign key relation with cascading delete
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade) // Foreign key relation with cascading delete
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId]) // Index on productId
  @@index([attributeId]) // Index on attributeId
}
